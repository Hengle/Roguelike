syntax = "proto3";
import "common.proto";

package MoleMole.Net;

message PacketSession{
    enum PacketType{
        Post = 0;
        Notify = 1;
        Request = 2;
        Response = 3;
    }
    int32 SessionId = 1;
    PacketType PType = 2;
    int32 CmdId = 3;
}

message CommonRsp{
    enum CmdId{
        CMD_ID = 0x1;
    }
    bool Success = 1;
    int32 ErrorCode = 2;
    string ErrorStr = 3;
}

message HeartBeat{
    enum CmdId{
         CMD_ID = 0x2;
    }
}

message LoginReq{
    enum CmdId {
        CMD_ID = 0x4;
    }
    string Account = 1;
    string Password = 2;
}

message LoginRsp{
    enum CmdId{
        CMD_ID = 0x5;
    }
    CommonRsp Rsp = 1;
    Player Player = 2;
}

message HackCmdReq{
    enum CmdId{
        CMD_ID = 0x6;
    }
    string Cmd = 1;
}

message HackCmdRsp{
    enum CmdId{
        CMD_ID = 0x7;
    }
    string Result = 1;
}

message SaveTeamConfigPost{
    enum CmdId{
        CMD_ID = 0x8;
    }
    int32 Index = 1;
    TeamConfig Team = 2;
}

message CostNotify{
    enum CmdId{
        CMD_ID = 0xa;
    }
    repeated int32 MobIds = 1;
    repeated Item Items = 2;
    uint64 LastStaminaRecoverTime = 3;
}

message LootNotify{
    enum CmdId{
        CMD_ID = 0xb;
    }
    repeated Mob Mobs = 1;
    repeated Item Items = 2;
    uint64 LastStaminaRecoverTime = 3;
}

message FinishBattleReq{
    enum CmdId{
        CMD_ID = 0xc;
    }
    int32 SessionId = 1;
    int32 LevelId = 2;
    int32 State = 3;
}

message FinishBattleRsp{
    enum CmdId{
        CMD_ID = 0xd;
    }

    int32 SessionId = 1;
    int32 LevelId = 2;
    int32 State = 3; // 0:Lose , 1:Win , 2:Draw

    CostNotify Cost = 4;
    LootNotify Loot = 5;
}

message UpdateMobPost{
    enum CmdId{
        CMD_ID = 0xe;
    }
    int32 InstancedId = 1;
    repeated int32 Skills = 2;
    string NickName = 3;
}

message RankUpMobReq{  //return CommonRsp or MobUpdateRsp
    enum CmdId{
        CMD_ID = 0x10;
    }
    int32 InstancedId = 1;
    repeated int32 ConsumedMobs = 2;
    /*  error code define
        0 : Mob not exist
        1 : Mob cannot evolve
        2 : Consumed not enough
        3 : Consumed mobs repeat
    */
}

message ExpUpMobReq{  //return CommonRsp or MobUpdateRsp
    enum CmdId{
        CMD_ID = 0x12;
    }
    int32 InstancedId = 1;
    int32 TokenCount = 2;
    /* error code define
        0 : Mob not exist
        1 : Token not enough
    */
}

message RecycleMobReq{  //return CommonRsp or ExchangeNotify
    enum CmdId{
        CMD_ID = 0x14;
    }
    repeated int32 RecycledMobs = 1;
    /*  error code define
        0 : RecycledMobs mobs repeat
        1 : Mob cannot recycle
        2 : Mob not exist
    */
}

message ExchangeNotify{
    enum CmdId{
        CMD_ID = 0x15;
    }
    CostNotify Cost = 1;
    LootNotify Loot = 2;
}

// RPG

message RpgSaveRecordReq{  //return CommonRsp
    enum CmdId{
        CMD_ID = 0x200;
    }
    RpgRecord Record = 1;
}

message RpgResetRecordReq{  //return CommonRsp
    enum CmdId{
        CMD_ID = 0x202;
    }
    int32 LevelID = 1;
}

message RpgLootReq{
	enum CmdId{
		CMD_ID = 0x204;
	}
	int32 itemID = 1;
	int32 itemCount = 2;
}

//multi player start here

message StartFindOpponentReq{ // return CommonRsp
    enum CmdId{
        CMD_ID = 0x100;
    }

    int32 PvpType = 1;
    BattleOnesConfig MyBattleConfig = 2;
}

message StopFindOpponentReq{ // return CommonRsp
    enum CmdId{
        CMD_ID = 0x102;
    }
    int32 PvpType = 1;
}

message SuccessFindOpponentNotify{ 
    enum CmdId{
        CMD_ID = 0x105;
    }

    int32 PvpType = 1;
    int32 SessionId = 2;
    BattleFullInfo Info = 3;
}

message BattleCmdReq{ // return CommonRsp
    enum CmdId{
        CMD_ID = 0x106;
    }
    int32 SessionId = 1;
    BattleCmd Cmd = 2;
}

message BattleCmdNotify{
    enum CmdId{
        CMD_ID = 0x109;
    }
    int32 SessionId = 1;
    BattleCmd Cmd = 2;
}

message QuitBattleReq{ // return CommonRsp
    enum CmdId{
        CMD_ID = 0x10a;
    }
    int32 SessionId = 1;
}

message SyncBattleEndReq{ // return CommonRsp
    enum CmdId{
        CMD_ID = 0x10b;
    }
    int32 SessionId = 1;
    int32 LevelId = 2;
    int32 State = 3;
}

//Temp here
message MobLevelUpReq{
    enum CmdId{
        CMD_ID = 0xf000;
    }
    int32 InstancedId = 1;
}
message MobRankUpReq{
    enum CmdId{
        CMD_ID = 0xf001;
    }
    int32 InstancedId = 1;
}
message MobUpdateRsp{
    enum CmdId{
        CMD_ID = 0xf002;
    }
    Mob TheMob = 1;
    CostNotify Cost = 2;
}